/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package nk.parquet_tut.avro;  
@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Person extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Person\",\"namespace\":\"nk.parquet_tut.avro\",\"fields\":[{\"name\":\"firstName\",\"type\":\"string\"},{\"name\":\"lastName\",\"type\":\"string\"},{\"name\":\"dob\",\"type\":\"string\"},{\"name\":\"sex\",\"type\":\"string\"},{\"name\":\"address\",\"type\":{\"type\":\"record\",\"name\":\"Address\",\"fields\":[{\"name\":\"street\",\"type\":\"string\"},{\"name\":\"city\",\"type\":\"string\"},{\"name\":\"state\",\"type\":\"string\"},{\"name\":\"country\",\"type\":\"string\"},{\"name\":\"zip\",\"type\":\"int\"}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }
  @Deprecated public java.lang.CharSequence firstName;
  @Deprecated public java.lang.CharSequence lastName;
  @Deprecated public java.lang.CharSequence dob;
  @Deprecated public java.lang.CharSequence sex;
  @Deprecated public nk.parquet_tut.avro.Address address;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>. 
   */
  public Person() {}

  /**
   * All-args constructor.
   */
  public Person(java.lang.CharSequence firstName, java.lang.CharSequence lastName, java.lang.CharSequence dob, java.lang.CharSequence sex, nk.parquet_tut.avro.Address address) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.dob = dob;
    this.sex = sex;
    this.address = address;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call. 
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return firstName;
    case 1: return lastName;
    case 2: return dob;
    case 3: return sex;
    case 4: return address;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }
  // Used by DatumReader.  Applications should not call. 
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: firstName = (java.lang.CharSequence)value$; break;
    case 1: lastName = (java.lang.CharSequence)value$; break;
    case 2: dob = (java.lang.CharSequence)value$; break;
    case 3: sex = (java.lang.CharSequence)value$; break;
    case 4: address = (nk.parquet_tut.avro.Address)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'firstName' field.
   */
  public java.lang.CharSequence getFirstName() {
    return firstName;
  }

  /**
   * Sets the value of the 'firstName' field.
   * @param value the value to set.
   */
  public void setFirstName(java.lang.CharSequence value) {
    this.firstName = value;
  }

  /**
   * Gets the value of the 'lastName' field.
   */
  public java.lang.CharSequence getLastName() {
    return lastName;
  }

  /**
   * Sets the value of the 'lastName' field.
   * @param value the value to set.
   */
  public void setLastName(java.lang.CharSequence value) {
    this.lastName = value;
  }

  /**
   * Gets the value of the 'dob' field.
   */
  public java.lang.CharSequence getDob() {
    return dob;
  }

  /**
   * Sets the value of the 'dob' field.
   * @param value the value to set.
   */
  public void setDob(java.lang.CharSequence value) {
    this.dob = value;
  }

  /**
   * Gets the value of the 'sex' field.
   */
  public java.lang.CharSequence getSex() {
    return sex;
  }

  /**
   * Sets the value of the 'sex' field.
   * @param value the value to set.
   */
  public void setSex(java.lang.CharSequence value) {
    this.sex = value;
  }

  /**
   * Gets the value of the 'address' field.
   */
  public nk.parquet_tut.avro.Address getAddress() {
    return address;
  }

  /**
   * Sets the value of the 'address' field.
   * @param value the value to set.
   */
  public void setAddress(nk.parquet_tut.avro.Address value) {
    this.address = value;
  }

  /** Creates a new Person RecordBuilder */
  public static nk.parquet_tut.avro.Person.Builder newBuilder() {
    return new nk.parquet_tut.avro.Person.Builder();
  }
  
  /** Creates a new Person RecordBuilder by copying an existing Builder */
  public static nk.parquet_tut.avro.Person.Builder newBuilder(nk.parquet_tut.avro.Person.Builder other) {
    return new nk.parquet_tut.avro.Person.Builder(other);
  }
  
  /** Creates a new Person RecordBuilder by copying an existing Person instance */
  public static nk.parquet_tut.avro.Person.Builder newBuilder(nk.parquet_tut.avro.Person other) {
    return new nk.parquet_tut.avro.Person.Builder(other);
  }
  
  /**
   * RecordBuilder for Person instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Person>
    implements org.apache.avro.data.RecordBuilder<Person> {

    private java.lang.CharSequence firstName;
    private java.lang.CharSequence lastName;
    private java.lang.CharSequence dob;
    private java.lang.CharSequence sex;
    private nk.parquet_tut.avro.Address address;

    /** Creates a new Builder */
    private Builder() {
      super(nk.parquet_tut.avro.Person.SCHEMA$);
    }
    
    /** Creates a Builder by copying an existing Builder */
    private Builder(nk.parquet_tut.avro.Person.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.firstName)) {
        this.firstName = data().deepCopy(fields()[0].schema(), other.firstName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastName)) {
        this.lastName = data().deepCopy(fields()[1].schema(), other.lastName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dob)) {
        this.dob = data().deepCopy(fields()[2].schema(), other.dob);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sex)) {
        this.sex = data().deepCopy(fields()[3].schema(), other.sex);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.address)) {
        this.address = data().deepCopy(fields()[4].schema(), other.address);
        fieldSetFlags()[4] = true;
      }
    }
    
    /** Creates a Builder by copying an existing Person instance */
    private Builder(nk.parquet_tut.avro.Person other) {
            super(nk.parquet_tut.avro.Person.SCHEMA$);
      if (isValidValue(fields()[0], other.firstName)) {
        this.firstName = data().deepCopy(fields()[0].schema(), other.firstName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.lastName)) {
        this.lastName = data().deepCopy(fields()[1].schema(), other.lastName);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.dob)) {
        this.dob = data().deepCopy(fields()[2].schema(), other.dob);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.sex)) {
        this.sex = data().deepCopy(fields()[3].schema(), other.sex);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.address)) {
        this.address = data().deepCopy(fields()[4].schema(), other.address);
        fieldSetFlags()[4] = true;
      }
    }

    /** Gets the value of the 'firstName' field */
    public java.lang.CharSequence getFirstName() {
      return firstName;
    }
    
    /** Sets the value of the 'firstName' field */
    public nk.parquet_tut.avro.Person.Builder setFirstName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.firstName = value;
      fieldSetFlags()[0] = true;
      return this; 
    }
    
    /** Checks whether the 'firstName' field has been set */
    public boolean hasFirstName() {
      return fieldSetFlags()[0];
    }
    
    /** Clears the value of the 'firstName' field */
    public nk.parquet_tut.avro.Person.Builder clearFirstName() {
      firstName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /** Gets the value of the 'lastName' field */
    public java.lang.CharSequence getLastName() {
      return lastName;
    }
    
    /** Sets the value of the 'lastName' field */
    public nk.parquet_tut.avro.Person.Builder setLastName(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.lastName = value;
      fieldSetFlags()[1] = true;
      return this; 
    }
    
    /** Checks whether the 'lastName' field has been set */
    public boolean hasLastName() {
      return fieldSetFlags()[1];
    }
    
    /** Clears the value of the 'lastName' field */
    public nk.parquet_tut.avro.Person.Builder clearLastName() {
      lastName = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /** Gets the value of the 'dob' field */
    public java.lang.CharSequence getDob() {
      return dob;
    }
    
    /** Sets the value of the 'dob' field */
    public nk.parquet_tut.avro.Person.Builder setDob(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.dob = value;
      fieldSetFlags()[2] = true;
      return this; 
    }
    
    /** Checks whether the 'dob' field has been set */
    public boolean hasDob() {
      return fieldSetFlags()[2];
    }
    
    /** Clears the value of the 'dob' field */
    public nk.parquet_tut.avro.Person.Builder clearDob() {
      dob = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /** Gets the value of the 'sex' field */
    public java.lang.CharSequence getSex() {
      return sex;
    }
    
    /** Sets the value of the 'sex' field */
    public nk.parquet_tut.avro.Person.Builder setSex(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.sex = value;
      fieldSetFlags()[3] = true;
      return this; 
    }
    
    /** Checks whether the 'sex' field has been set */
    public boolean hasSex() {
      return fieldSetFlags()[3];
    }
    
    /** Clears the value of the 'sex' field */
    public nk.parquet_tut.avro.Person.Builder clearSex() {
      sex = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /** Gets the value of the 'address' field */
    public nk.parquet_tut.avro.Address getAddress() {
      return address;
    }
    
    /** Sets the value of the 'address' field */
    public nk.parquet_tut.avro.Person.Builder setAddress(nk.parquet_tut.avro.Address value) {
      validate(fields()[4], value);
      this.address = value;
      fieldSetFlags()[4] = true;
      return this; 
    }
    
    /** Checks whether the 'address' field has been set */
    public boolean hasAddress() {
      return fieldSetFlags()[4];
    }
    
    /** Clears the value of the 'address' field */
    public nk.parquet_tut.avro.Person.Builder clearAddress() {
      address = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    public Person build() {
      try {
        Person record = new Person();
        record.firstName = fieldSetFlags()[0] ? this.firstName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.lastName = fieldSetFlags()[1] ? this.lastName : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.dob = fieldSetFlags()[2] ? this.dob : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.sex = fieldSetFlags()[3] ? this.sex : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.address = fieldSetFlags()[4] ? this.address : (nk.parquet_tut.avro.Address) defaultValue(fields()[4]);
        return record;
      } catch (Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }
}
